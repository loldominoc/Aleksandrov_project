---
title: Лабораторна робота №3. Змінні. Базові операції вводу/виводу
description: 'Документ зроблено за допомогою [Quarto](https://quarto.org/)'
lang: ukr
format:
  html:
    code-fold: true
    toc: true
    toc_float:
      collapsed: true
      number_sections: true
jupyter: python3
---

__Мета:__ _освоїти роботу зі змінними та операції вводу і виводу_

::: callout-note
## Примітка
Перед виконанням лабораторної роботи необхідно опрацювати матеріал __Лекції 3__.
:::

::: callout-note
## Примітка
У лабораторній роботі використано матеріали [python institute.](https://pythoninstitute.org/pcep) 
:::

### Завдання № 1

Написати програму, яка обчислює значення функції Гауса: 
$$f(x) = \frac{1}{\sigma \sqrt{2 \pi}} e^{-\frac{(x-\mu)^2}{2\sigma^2}}$$

```{python}
import math

u, sigma, x = 0, 1, 0 
result = (1 / (sigma * math.sqrt(2 * math.pi))) * math.exp(-((x - u) ** 2) / (2 * sigma ** 2))
print(f"Значення функції Гауса для x={x}, u={u}, sigma={sigma} дорівнює {result:.5f}")
```

###  Завдання № 2

Ось невелика розповідь:

Якось Джон (John) мав три яблука, Мері (Mary) мала п'ять яблук, а Адам (Adam) мав шість яблук. Усі вони були дуже щасливі та жили довго. Кінець історії.

Ваше завдання:

* створіть змінні: `john`, `mary`, і `adam`;

* надайте значення змінним. Значення повинні дорівнювати кількості фруктів, якими володіють Джон, Мері, і Адам відповідно;

* зберігши числа в змінних, виведіть змінні в один рядок і розділіть їх комами;

* тепер створіть нову змінну з ім'ям `totalApple`, що дорівнює сумі трьох попередніх змінних;

* вивести значення, збережене в `totalapples`, в консоль;

* надрукувати рядок та ціле число разом в одному рядку, наприклад, "Загальна кількість яблук:" та `total_apples`|.

```{python}
john, mary, adam = 3, 5, 6
print(f"{john}, {mary}, {adam}")

totalApple = john + mary + adam
print(totalApple)

print(f"Загальна кількість яблук: {totalApple}")
```

### Завдання № 3

Милі та кілометри – це одиниці довжини або відстані.

Враховуючи, що 1 миля дорівнює приблизно 1.61 кілометрам, напишіть програму, щоб вона перетворила:

* милі у кілометри;

* кілометри на милі.

Не змінюйте нічого в існуючому коді. Напишіть свій код у місцях, вказаних ###. Протестуйте вашу програму з даними, які надано у вихідному коді.

Зверніть особливу увагу на те, що відбувається всередині функції `print()`. Проаналізуйте, як ми надаємо кілька аргументів функції та як ми виводимо очікувані дані.

Зауважте, що деякі аргументи всередині функції `print()` є рядками (наприклад, `"miles is"`, тоді як деякі інші є змінними (наприклад, `miles`).

```{python}
kilometers = 12.25
miles = 7.38

miles_to_kilometers = miles * 1.61
kilometers_to_miles = kilometers / 1.61

print(miles, "miles is", round(miles_to_kilometers, 2), "kilometers")
print(kilometers, "kilometers is", round(kilometers_to_miles, 2), "miles")
```

Очікуваний вивід:

`7.38 miles is 11.88 kilometers`

`12.25 kilometers is 7.61 miles`

### Завдання № 4

Подивіться код у редакторі: він читає "плаваюче" значення, поміщає його у змінну з ім'ям `x`, і друкує значення змінної з ім'ям `y`. Ваше завдання - завершити код, щоб оцінити такий вираз:

$$3x^3 - 2x^2 + 3^x - 1$$

Результат має бути присвоєний `y`.

```{python}
x =  1
x = float(x)

y = 3 * x ** 3 - 2 * x ** 2 + 3 ** x - 1

print("y =", y)
```

__Тестові данні__

Приклад вводу

`x = 0`

`x = 1`

`x = -1`

Приклад виводу

`y = -1.0`

`y = 3.0`

`y = -9.0`

### Завдання № 5 

Код редактора містить коментарі. Спробуйте покращити його: додайте або видаліть коментарі там, де ви вважаєте це доречним (так, іноді видалення коментаря може зробити код більш читабельним) і змініть імена змінних там, де, на вашу думку, це покращить розуміння коду.

```{python}
# This program computes the number of seconds in a given number of hours

hours = 3 # number of hours
seconds = 3600 # number of seconds in 1 hour

print("Hours: ", hours) # printing the number of hours
print("Seconds in Hours: ", hours * seconds) # printing the number of seconds in a given number of hours
```

### Завдання № 6 

Ваше завдання – завершити код, щоб отримати результати чотирьох основних арифметичних операцій.

Результати мають бути виведені у консолі.

Можливо, ви не зможете захистити код від користувача, який хоче ділити на нуль. Пізніше ми взнаємо, як це зробити.

```{python}
a = 5 # a = float(input("Enter a number a: "))
b = 5 # b = float(input("Enter a number b: "))

print(a + b)
print(a - b)
print(a * b)
print(a / b)

print("\nThat's all, folks!")
```

### Завдання № 7 

Ваше завдання -- завершити код, щоб оцінити такий вираз:
$$\frac{1}{x + \frac{1}{x + \frac{1}{x + \frac{1}{x + \frac{1}{x}}}}}$$


Результат має бути присвоєний `y`.

Ви можете використовувати додаткові змінні для зменшення виразу (але це не обов'язково). Ретельно тестуйте свій код.

```{python}
x = 1 # x = float(input("Enter value for x: "))
x = float(x)

y = 1 / (x + 1 / (x + 1 / (x + 1 / (x + 1 / x))))

print("y =", y)
```

__Тестові дані__

`x = 1`

`y = 0.6000000000000001`

`x = 10`

`y = 0.09901951266867294`

`x = 100`

`y = 0.009999000199950014`

`x = -5`

`y = -0.19258202567760344`

### Завдання № 8

Ваше завдання - підготувати простий код, здатний порахувати час закінчення періоду часу, вираженого в кількості хвилин (воно може бути як завгодно великим). Час початку вказується у вигляді пари годин (0..23) та хвилин (0..59). Результат повинен бути надрукований на консолі.

Наприклад, якщо подія починається о __12:17__ і триває __59__ хвилин, вона закінчується о __13:16__.

Не турбуйтеся про будь-які недоліки у вашому коді –- це нормально, якщо він приймає неприпустимий час -– найважливіше, що код видає дійсні результати для правильних вхідних даних.

Ретельно перевірте код. Підказка: використання оператора `%` може бути ключем до успіху.

```{python}
hour = 12 # hour = int(input("Starting time (hours): "))
mins = 17  # mins = int(input("Starting time (minutes): "))
dura = 59 # dura = int(input("Event duration (minutes): "))

t_hour = ((hour * 60 + mins + dura) // 60) % 24
t_mins = (hour * 60 + mins + dura) % 60

print(f"Подія закінчиться о {t_hour}:{t_mins}")
```

__Тестові дані__

Приклад вводу:

`12`

`17`

`59`

Очікуваний результат: `13:16`

Приклад вводу:

`23`

`58`

`642`

Очікуваний результат: `10:40`

Приклад вводу:

`0`

`1`

`2939`

Очікуваний результат: `1:0`

## Завдання для самостіної роботи

1. Виконати завдання 1-8, наведені вище у цьому зошиті.

2. Створити файл __lab_3_StudentLastName.py__ з написаним кодом. 

  ![Файл з завданнями](attachment:{64C08CCD-98D8-4699-9885-266225033E90}.png)

3. Закомітити файл у локальний репозиторій.

  ![Коміт файлу](attachment:{BAB416A3-168B-419F-BD60-6E31423F863C}.png)

4. Відправити поточну версію Git-проєкта у віддалений репозиторій на GitHub.

  ![Пуш файлу на віддалений репозиторій](attachment:{F9625311-CB07-4E7C-8B17-A8014C2546CE}.png)

5. Звіт має складатися з файлу (за основу взяти __цей Python-зошит__)  `lab_3_StudentLastName.ipynb`. (Можливі якісь додакові файли)

## Контрольні запитання

1. Який вивод наступного фрагмента?
![image.png](attachment:1360c658-010b-4de1-a472-146e2538d7fa.png)

    Оператор множення для рядків використовується для дублювання рядка на вказану кількість разів, тому наступний вивід буде виглядати так: 55

2. Який очікуваний результат наступного фрагмента?
![image.png](attachment:60241ea3-0668-4101-b53a-ded32d40f1be.png)

    На перший погляд функція type(), повинна повернути тип int, але це не так. Функція input() завжди повертає значення у вигляді рядка тип str, незалежно від того, що користувач вводить.

## References

1. [Github](https://github.com/loldominoc/Aleksandrov_project)

